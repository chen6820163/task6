<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <!--
        applicationContext-dao 主要整合mybatis 不包括事务
        为了后期维护也是为了单一职能原则
        什么时候用注解
        什么时候用xml配置
         如果是自己写的代码就使用注解
         如果是配置第三方jar包，那么就需要xml配置
     -->

    <!-- 导入外部配置的数据库连接信息 -->
    <context:property-placeholder location="classpath:datasource.properties" />
    <!-- 导入外部配置的memcached.properties信息 -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="order" value="1"/>
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>classpath:memcached.properties</value>
            </list>
        </property>
    </bean>

    <!--
        druidDataSource
        配置连接数据库的信息
        连接数据库的url
        连接数据库的usernmae
        连接数据库的pasword
        连接数据库的driver
     -->
    <bean name="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 通过set方法注入值 -->
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3" />
        <property name="minIdle" value="1" />
        <property name="maxActive" value="10" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="10000" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="testWhileIdle" value="true" />

        <!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
        <property name="testOnBorrow" value="true" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="20" />
    </bean>


    <!--
        sqlSessionFactoryBean
        配置mybatis的一些相关信息
        比如说：
            mybatis操作数据库的信息
            mybatis的映射文件
            mybatis分页信息
            mybatis起别名
     -->
    <bean name="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- set方法注入 -->
        <property name="dataSource" ref="druidDataSource"></property>
        
        <!-- 映射文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>

        <!--&lt;!&ndash; mybatis分页插件 pagehelper &ndash;&gt;-->
        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!-- config params as the following -->
                        <value>
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>
   

    <!--
        mapperScannerConfigurer
         映射扫描接口
         是为了告诉spring容器mybatis的映射接口在什么包底下
         然后spring容器才能给映射接口动态的产生一个代理实现类
     -->
    <bean name="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.jnshu.task4.dao"></property>
    </bean>

    <!--
		applicationContext-service.xml
		1.扫描service层底下所有的注解
		2.方便后期业务扩展
	 -->
    <context:component-scan base-package="com.jnshu.task4.service.impl"></context:component-scan>

    <context:component-scan base-package="com.jnshu.task4.common.utils"></context:component-scan>
    <!-- spring 集成缓存服务器（memcached） -->
    <bean id="memCachedPool" lazy-init="false" class="com.danga.MemCached.SockIOPool"
          factory-method="getInstance" init-method="initialize" destroy-method="shutDown">
        <constructor-arg>
            <value>memcache</value>
        </constructor-arg>
        <property name="servers">
            <list>
                <value>${memcached.server}:${memcached.port}</value>
            </list>
        </property>
        <property name="initConn">
            <value>${memcached.initConn}</value>
        </property>
        <property name="minConn">
            <value>${memcached.minConn}</value>
        </property>
        <property name="maxConn">
            <value>${memcached.maxConn}</value>
        </property>
        <property name="maintSleep">
            <value>${memcached.maintSleep}</value>
        </property>
        <property name="nagle">
            <value>${memcached.nagle}</value>
        </property>
        <property name="socketTO">
            <value>${memcached.socketTO}</value>
        </property>
    </bean>
    <bean id="memCachedClient" class="com.danga.MemCached.MemCachedClient">
        <constructor-arg>
            <value>memcache</value>
        </constructor-arg>
    </bean>
    <!--memcachedManager,封装memcachedClient的一些方法-->
    <bean id="memCachedManager" class="com.jnshu.task4.common.utils.MemCachedManager"/>
    <!--开启aop-->
    <!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
    <!--<context:component-scan base-package="com.jnshu.task4.common.aop"/>-->
</beans>